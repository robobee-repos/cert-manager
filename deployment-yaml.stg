/*
 * Mandatory:
 *
 * vars.certManager.image.version
 * vars.certManager.limits.cpu
 * vars.certManager.limits.memory
 * vars.certManager.requests.cpu
 * vars.certManager.requests.memory
 * 
 * Optional:
 *
 * vars.certManager.affinity.key
 * vars.certManager.affinity.name
 * vars.certManager.affinity.required
 * vars.certManager.allowOnMaster
 * vars.certManager.tolerations[].effect
 * vars.certManager.tolerations[].key
 * vars.certManager.tolerations[].value
 */

import "_affinities.stg"
import "_resources.stg"
import "_tolerations.stg"

/*
 *
 */
deployment-yaml(parent, vars) ::= <<
##---
# Source: cert-manager/templates/deployment.yaml
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: cert-manager
  namespace: "cert-manager"
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: "cert-manager"
    app: cert-manager
    chart: cert-manager-<vars.certManager.image.version>
    release: cert-manager
    heritage: Tiller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cert-manager
      release: cert-manager
  template:
    metadata:
      labels:
        app: cert-manager
        release: cert-manager
      annotations:
    spec:
      serviceAccountName: cert-manager
      containers:
        - name: cert-manager
          image: "quay.io/jetstack/cert-manager-controller:<vars.certManager.image.version>"
          imagePullPolicy: IfNotPresent
          args:
          - --cluster-resource-namespace=$(POD_NAMESPACE)
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
<resourcesGroup(parent, vars, vars.certManager.limits, vars.certManager.requests)>
<tolerationMasterGroup(parent, vars, vars.certManager.allowOnMaster)>
<tolerationsGroup(parent, vars, vars.certManager.tolerations, vars.certManager.allowOnMaster)>
<affinitiesGroup(parent, vars, vars.certManager.affinity)>

>>
